@using Duftfinder.Resources
@using Duftfinder.Web.Controllers
@model Duftfinder.Web.Models.EssentialOilViewModelIndex

@{
    ViewBag.Title = nameof(EssentialOilController.Index);
}

@section Scripts
{
    <script src="/js/Dialog.js"></script>
    <script src="/js/EssentialOil.js"></script>
}

<div id="essential-oils" class="duftfinder-content">
    <h2>@Resources.EssentialOil_EssentialOils</h2>

    @Html.HiddenFor(model => model.LastEditedEssentialOilId, new {id = "lastEditedEssentialOilId"})

    <p>
        @Html.ActionLink(Resources.EssentialOil_Create, nameof(EssentialOilController.CreateOrEdit))
    </p>

    <table class="table">
        <tr>
            <th>
                <label>@Resources.EssentialOil_Name</label>
            </th>
            <th>
                <label>@Resources.EssentialOil_NameLatin</label>
            </th>
            <th>
            </th>
            <th></th>
        </tr>
        @{
            int picNumber = 0;
        }

        @foreach (var alphabeticalIndex in Model.AlphabeticalIndexes)
        {
            @* List all alphabeticalIndexes. (A-Z)*@
            <tr>
                <td class="italic">
                    <label>@alphabeticalIndex</label>
                </td>
                <td></td>
                <td></td>
                <td></td>
            </tr>

            foreach (var essentialOilViewModel in Model.EssentialOilViewModels)
            {
                // Order essential oils by their alphabetical indexes.
                if (essentialOilViewModel.FirstLetterOfEssentialOilName == alphabeticalIndex)
                {
                    <tr data-item-value-id="@essentialOilViewModel.Id">
                        <td class="row-indention">
                            @Html.DisplayFor(modelItem => essentialOilViewModel.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => essentialOilViewModel.NameLatin)
                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(essentialOilViewModel.PictureFileName))
                            {
                                picNumber = picNumber + 1;
                                <img id="picture-container" picnumber="@picNumber" class="picture" width="50" height="50" src="@essentialOilViewModel.PictureDataAsStringDisplay"/>

                                <div>
                                    <span id="pop-up_@picNumber" class="picture-popup">

                                        <img src="@essentialOilViewModel.PictureDataAsStringDisplay"/>
                                    </span>
                                </div>
                            }
                        </td>
                        <td>
                            <div>
                                @Html.ActionLink(Resources.Action_Edit, nameof(EssentialOilController.CreateOrEdit), new {id = essentialOilViewModel.Id}) |
                                @* Button is triggered in EssentialOil.js *@
                                <a href="#" class="delete-buttons" data-item-id="@essentialOilViewModel.Id" data-item-name="@essentialOilViewModel.Name">@Resources.Action_Delete</a>
                            </div>

                            @* Placehoder for modal dialog. Html is set in Dialog.js*@
                            <div id="dialog-modal-@essentialOilViewModel.Id" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="dialog-modal-label" aria-hidden="true">
                            </div>
                        </td>
                    </tr>
                }
            }
        }
    </table>
</div>